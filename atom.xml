<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一川向日葵</title>
  
  
  <link href="http://frank-2169.github.io/atom.xml" rel="self"/>
  
  <link href="http://frank-2169.github.io/"/>
  <updated>2023-06-14T08:18:24.442Z</updated>
  <id>http://frank-2169.github.io/</id>
  
  <author>
    <name>一川向日葵</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关系型数据库-sql</title>
    <link href="http://frank-2169.github.io/2023/06/09/guan-xi-xing-shu-ju-ku-sql/"/>
    <id>http://frank-2169.github.io/2023/06/09/guan-xi-xing-shu-ju-ku-sql/</id>
    <published>2023-06-08T16:00:00.000Z</published>
    <updated>2023-06-14T08:18:24.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关系型数据库-sql"><a href="#关系型数据库-sql" class="headerlink" title="关系型数据库-sql"></a><strong>关系型数据库-sql</strong></h1><p>前言：本编主要针对mysql数据(默认Innodb存储引擎)展开。</p><h2 id="一、mysql逻辑架构"><a href="#一、mysql逻辑架构" class="headerlink" title="一、mysql逻辑架构"></a>一、mysql逻辑架构</h2><p><img src="/2023/06/09/guan-xi-xing-shu-ju-ku-sql/mysql%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84.png" alt="mysql逻辑架构"></p><h2 id="二、存储引擎"><a href="#二、存储引擎" class="headerlink" title="二、存储引擎"></a>二、存储引擎</h2><p>innodb存储引擎</p><h2 id="三、文件结构"><a href="#三、文件结构" class="headerlink" title="三、文件结构"></a>三、文件结构</h2><h2 id="四、并发管理和锁"><a href="#四、并发管理和锁" class="headerlink" title="四、并发管理和锁"></a>四、并发管理和锁</h2><p>只要有多个查询需要同时修改数据就会产生并发控制问题。mysql有两个级别的并发控制：服务器级别与存储引擎级别。</p><p>下面介绍mysql的一些主要锁：</p><table><thead><tr><th>锁的类别</th><th>锁的粒度</th><th>适用场景</th><th>备注</th></tr></thead><tbody><tr><td>表锁</td><td>整张表</td><td>适用于大多数语句都是读的情况，也适用于读写混合的语句。</td><td>开销小，但写操作一多容易阻塞</td></tr><tr><td>行级锁</td><td>行</td><td>能最大程度的支持并发处理。</td><td>开销大，是在存储引擎实现的。</td></tr><tr><td>间隙锁</td><td></td><td></td><td></td></tr><tr><td>多版本号控制</td><td>行级锁的变种，在很多情况下可避免加锁操作</td><td>目前的大多数事务都是使用行级锁+MVCC</td><td>开销小</td></tr></tbody></table><h2 id="五、事务管理"><a href="#五、事务管理" class="headerlink" title="五、事务管理"></a>五、事务管理</h2><p>事务就是一组sql语句作为一个工作单元以原子方式处理。要么全部成功要么全部失败。mysql的事务管理可以认为采用行级锁和MVCC技术相结合。</p><p>mysql存储引擎会把每条增删改语句都隐性包装在一个事务中执行并自动提交(AUTOCOMMIT)，可以使用命令{SET AUTOCOMMIT=OFF}关闭。如果有多条语句需要开启事务可以使用命令{BEGIN TRANSACTION … COMMIT/ROLLBACK}。</p><p>mysql事务满足ACID事务的标准。在事务开启时分配一个事务标识符(DB_TRX_ID)，修改记录时将向undo日志写入如何恢复更改的记录，并且将事务的回滚指针(roll_pointer)指向undo日志，从而保证原子性。mysql的更改会先写到redo日志，避免引起过多的磁盘io，最后会由一个后台进程更新到磁盘。如果事务已提交，存储引擎重启时可根据redo日志进行恢复，从而保证持久性。隔离性则由MVCC（利用记录的版本链和ReadView）来保证。当原子性、持久性、隔离性都有保证，便能保证一致性。</p><p>ANSI SQL中定义了四种隔离级别，如下：</p><table><thead><tr><th>隔离级别</th><th>说明</th><th>脏读(读取未提交)</th><th>不可重复读</th><th>幻读</th><th>加锁读</th></tr></thead><tbody><tr><td>READ UNCOMMITTED(未提交读)</td><td>在事务中可以看到其它事务中还没有提交的修改。</td><td>是</td><td>是</td><td>否</td><td>否</td></tr><tr><td>READ COMMITTED(提交读)</td><td>自己事务未提交前所做的任何修改对其它事务都是不可见的。自然不支持重复读，避免出现幻读。</td><td>否</td><td>是</td><td>是</td><td>否</td></tr><tr><td>REPEATABLE READ(可重复读)</td><td>在提交读基础上解决不可重复读问题，保证同一事务中多次读取相同数据行的结果是一样的。</td><td>否</td><td>否</td><td>是</td><td>否</td></tr><tr><td>SERIALIZABLE(可串行化)</td><td>强制事务按顺序执行</td><td>否</td><td>否</td><td>否</td><td>是</td></tr></tbody></table><p>mysql默认是REPEATABLE READ(可重复读)。注意多个不同事务一起执行时，较容易出现死锁现象，不过好在数据库系统实现了死锁检测和锁超时机制。</p><h2 id="六、监控调优等工具的使用"><a href="#六、监控调优等工具的使用" class="headerlink" title="六、监控调优等工具的使用"></a>六、监控调优等工具的使用</h2><p><strong>EXPLAIN</strong>:</p><h2 id="七、schema的设计与管理"><a href="#七、schema的设计与管理" class="headerlink" title="七、schema的设计与管理"></a>七、schema的设计与管理</h2><p><strong>数据类型的选择</strong></p><p>表数据类型的选择目标是小和简单。</p><table><thead><tr><th></th><th>类型</th><th>存储大小（位）</th><th>说明</th></tr></thead><tbody><tr><td>整数类型</td><td>TINYYINT / BOOL</td><td>8</td><td>UNSIGNED修饰的话存储范围提高一倍。可以指定宽度，但存储和计算，INT(1)和INT(20)没有区别。</td></tr><tr><td></td><td>SMALLINT</td><td>16</td><td></td></tr><tr><td></td><td>MEDIUMINT</td><td>24</td><td></td></tr><tr><td></td><td>INT</td><td>32</td><td></td></tr><tr><td></td><td>BIGINT</td><td>64</td><td></td></tr><tr><td>实数类型</td><td>FLOAT</td><td>32</td><td>计算都是以double类型计算</td></tr><tr><td></td><td>DOUBLE</td><td>64</td><td></td></tr><tr><td></td><td>DECIMAL</td><td>2-17字节</td><td>DECIMAL(a,b) a是整数部分的最大个数，b是小数点后的个数。可用于存储精确的实数</td></tr><tr><td>字符串</td><td>CHAR</td><td></td><td>适用于存储定长短字符串，如MD5；适用于存储单字节，比如单位。CHAR(1)只占用1字节。</td></tr><tr><td></td><td>VARCHAR</td><td></td><td>用于存储可变长度字符串，需要二外1-2字节记录长度。当使用内存临时表时，多余未用的长度也会占用空间。</td></tr><tr><td>超文本</td><td>TEXT</td><td></td><td>采用字符方式存储；不可使用索引。</td></tr><tr><td></td><td>BLOB</td><td></td><td>采用二进制方式存储；不可使用索引。</td></tr><tr><td>枚举</td><td>ENUM</td><td>1-2字节</td><td>存储整数对应有序的字符串，查询返回依旧是字符串。适用于固定少量几个常量且无需频繁变动的列，但要注意与其它类型联接时的效率。</td></tr><tr><td>日期和时间</td><td>DATETIME</td><td>8字节</td><td>精确到微秒，与时区无关。</td></tr><tr><td></td><td>TIMESTAMP</td><td>4字节</td><td>范围小，只能表示19700101-20380119。会根据时区变化。插入更新可自动设置成当前时间。也可以使用UNSIGNED INT代替，表达到2106年。</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>主键类型的选择</strong></p><table><thead><tr><th>主键类型</th><th>优点</th><th>缺点</th><th>注意点</th></tr></thead><tbody><tr><td>自增id（AUTO_INCREMENT）</td><td>简单快速，内存占用小。可保证顺序写，最大化避免内存碎片。</td><td>高并发插入可能导致间隙锁竞争，反而影响效率。不利于表的合并或扩展；分库分表后主键会重复。</td><td>类型选择int,bigint，考虑是否会超过最大行。需要考虑表扩展或迁移时慎重考虑。存在高并发插入情况慎用或不用。</td></tr><tr><td>雪花算法</td><td>随机且呈现出递增增长，利于数据迁移。</td><td>依赖系统时钟</td><td>分布式系统中，每台机器一定要分配不同的workid，需要保证系统时间的一致性。</td></tr><tr><td>UUID</td><td>足够随机，利于数据迁移。</td><td>无序。不利于插入操作，有易于造成页分裂的可能。（不够聚簇）</td><td>存储时应该删除破折号。或者用UNHEX()转换成32位的数字。插入操作较多时不建议使用。</td></tr></tbody></table><p><strong>sql范式</strong></p><p>sql三大范式可能面试会问到。所谓范式只是用来学习参考的，还是要具体问题具体分析的。为了提高查询性能也是可以降低规范化的级别的。</p><p>第一范式（1NF）：原子性。要求数据库表的每一列都是不可分割的原子数据项。</p><p>第二范式（2NF）：在1NF的基础上，确保表中的每列都和主键相关。</p><p>第三范式（3NF）：在2NF的基础上，确保每列都和主键列直接相关,而不是间接相关。某些情况下适当考虑表拆分。</p><h2 id="八、索引和查询优化"><a href="#八、索引和查询优化" class="headerlink" title="八、索引和查询优化"></a>八、索引和查询优化</h2><p>创建索引一般是针对提高查询速度而言的，同时平衡其它DML的性能损耗。</p><h3 id="8-1-索引"><a href="#8-1-索引" class="headerlink" title="8.1 索引"></a>8.1 索引</h3><p>首先明确，创建索引(index)就是为了检索。索引优化是对查询优化最有效的手段。那么在不考虑内存问题和其它DML性能损耗的情况下，三星索引&gt;二星索引&gt;一星索引。所以在建表的时候，选择合适的schema就尤为重要。有哪些索引？怎么选择索引？如何验证索引是否合适？如何维护索引和表？（索引的创建与优化仅针对大表而言，小表为了避免回表全表扫描会更具有优势）</p><p>先介绍一些索引概念：</p><table><thead><tr><th>名称</th><th>介绍</th><th>适用范围</th><th>语法</th></tr></thead><tbody><tr><td>B+Tree索引</td><td></td><td>适用于全键值、键值范围、键前缀查找(只支持最左前缀)</td><td></td></tr><tr><td>自适应哈希索引</td><td>当某些索引值被频繁访问时，在B+Tree基础上，在内存中创建一个哈希索引。此过程是全自动化的。</td><td>热点键值（自适应，可配置文件手动关闭）；适用于联表列。</td><td></td></tr><tr><td>链表索引</td><td></td><td></td><td></td></tr><tr><td>位图索引</td><td></td><td></td><td></td></tr><tr><td>全文索引</td><td></td><td>适用于查找文本中的关键字(MATCH AGAINST操作)</td><td></td></tr><tr><td>聚簇索引</td><td></td><td>innodb默认使用</td><td></td></tr><tr><td>前缀索引</td><td></td><td>前缀索引的结果应该接近于完整索引的结果</td><td>ALTER TABLE &lt;&gt; ADD KEY &lt;indexName(schema(n))&gt;</td></tr></tbody></table><p>选择索引的一个重要指标便是选择性：不重复的索引值(也叫基数)和数据表的记录总数的比值。（唯一索引的选择性为1，前缀索引的基数应该接近于完整列的基数）可以通过如下计算获得：</p><p><code>mysql&gt; SELECT COUNT(DISTINCT col_3)/COUNT(*) FROM data_1.table_1;</code> </p><p>一般将选择性最高的索引放在索引列最前列。但具体问题还要具体分析，最好的方式就是使用EXPLAIN命令+{USING [index]}/{IGNORE [index]}查看，不停地找到满足各个复杂查询的单个或多个索引。是要创建一个索引还是多个索引？是创建单列索引还是多列索引？这些都没有固定的公式的。（知识会忘记，请记住方法，如果方法也容易忘记，至少请记住思想。如果怕忘记思想，请升华为智慧）</p><p>mysql单列索引会用到”索引合并”策略，在一定程度上使用多个单列索引进行扫描并将结果合并。有OR的联合(Union)、AND条件相交、前两者组合。但如果扫描到选择性不高的索引，将会有大量数据返回并在内存中做合并处理，严重情况下会比全表扫面恶劣。可以在语句中加入{IGNORE [index]}让优化器忽略掉某些索引。选择多列索引往往比选择多个单列索引效果要好，但要特别注意索引失效的问题。</p><p>通常，表联接的字段是要设置索引的。不建议多级表联接，如果必要可尝试拆成星型联接。</p><p><strong>索引的维护</strong></p><p>1、在(业务)逻辑上去除冗余和重复索引。去除多余的索引。可以用命令查看未使用的索引。<code>mysql&gt; SELECT * FROM sys.schema_unused_indexes;</code></p><p>2、更新表的索引统计信息：<code>ANALYZE TABLE &lt;&gt;;</code></p><p>3、在单次大批量写操作后，整理索引和数据碎片：<code>OPTIMIZE TABLE &lt;&gt;;</code>或者重新导出导入数据。</p><p>4、尝试用：<code>CHECK TABLE &lt;&gt;;</code>查看是否有损坏的表或索引；尝试用<code>REPAIR TABLE &lt;&gt;;</code>修复。</p><h3 id="8-2-查询"><a href="#8-2-查询" class="headerlink" title="8.2 查询"></a>8.2 查询</h3><p>查询优化方法（不做、少做、快速地做）：1、索引优化和库表结构优化。2、减少查询访问数据，减少返回数据（没用到的字段不返回；limit限制）。3、重构查询语句：拆分复杂查询成多个单查询；分解联接查询或重新排序；常数替换或代数等价变换；其它等等。最后，依然可以根据EXPLAIN（重点关注type列、ref列和rows列）具体问题具体分析。</p><p>如何判断查询的效率：</p><p>参考指标可以有：响应时间（服务时间+排队时间）、扫描的行数、返回的函数。</p><p>具体套用公式或算法可以参考“快速上限估计”算法或者QUBE快速估算法。</p><p><strong>查询优化小技巧</strong></p><p>1、如非指定列，一概使用<code>count(*)</code>（不统计NULL）。</p><p>2、联接查询的联接列上有索引。</p><p>3、GROUP BY和ORDER BY建议使用同一个索引。</p><p>4、多在应用程序进行聚合处理，可减少临时表的创建。</p><p>5、使用UNION默认会消除重复行，如果要包含重复行，一定要使用UNION ALL。</p><h2 id="附录1-常用术语解释"><a href="#附录1-常用术语解释" class="headerlink" title="附录1  常用术语解释"></a>附录1  常用术语解释</h2><p><strong>ACID事务</strong>：原子性(atomicity)、一致性(consistency)、隔离性(isolation)、持久性(durability)。</p><p><strong>MVCC</strong>(Multiversion Concurrency Control)：多版本并发控制。</p><p><strong>DML</strong>(Data Manipulation Language)：数据操纵语句，关键字主要包括 insert、delete、udpate 和select 等。</p><p><strong>DDL</strong>(Data Definition Languages)：数据定义语言，这些语句定义了不同的数据段、数据库、表、列、索引等数据库对象的定义。常用的语句关键字主要包括 create、drop、alter等。</p><p><strong>DCL</strong>(Data Control Language)：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括 grant、revoke 等。</p><p><strong>一星索引</strong>：“窄索引”。即索引扫描过滤结果的行数尽量小。</p><p><strong>二星索引</strong>：“排序星”。索引的排序和谓词的排序相同。即返回结果无需在内存中再排序。</p><p><strong>三星索引</strong>：“覆盖索引”。无需进行回表操作，即索引结果便是查询结果。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1、官网：<a href="https://mysql.net.cn/doc/refman/8.0/en/union.html">https://mysql.net.cn/doc/refman/8.0/en/union.html</a></p><p>2、《高性能MYSQL》 ——Silivia Botros、Jeremy Tinley</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关系型数据库-sql&quot;&gt;&lt;a href=&quot;#关系型数据库-sql&quot; class=&quot;headerlink&quot; title=&quot;关系型数据库-sql&quot;&gt;&lt;/a&gt;&lt;strong&gt;关系型数据库-sql&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;前言：本编主要针对mysql数据(默认In</summary>
      
    
    
    
    <category term="数据库" scheme="http://frank-2169.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="关系型数据库" scheme="http://frank-2169.github.io/tags/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="mysql" scheme="http://frank-2169.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-树</title>
    <link href="http://frank-2169.github.io/2023/06/03/shu-ju-jie-gou-shu/"/>
    <id>http://frank-2169.github.io/2023/06/03/shu-ju-jie-gou-shu/</id>
    <published>2023-06-02T16:00:00.000Z</published>
    <updated>2023-06-09T00:59:50.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构-树"><a href="#数据结构-树" class="headerlink" title="数据结构-树"></a><strong>数据结构-树</strong></h1><h2 id="一、树"><a href="#一、树" class="headerlink" title="一、树"></a>一、树</h2><p>树是有一种抽象描述的数据结构，在内存中本质是以数组（连续内存块）或链表（内存不连续）的形式表达，树只是对元素关系的一种抽象描述。</p><p>定义：一棵树t是一个非空的有限元素的集合，其中一个元素为根(root)，其余的元素组成t的子树(subtree)。</p><h2 id="二、二叉树"><a href="#二、二叉树" class="headerlink" title="二、二叉树"></a>二、二叉树</h2><p>在树的基础上，每个元素恰好有两颗子树（其中一个或两个可能为空）。</p><p>高度为h的二叉树恰好有2^h-1个元素时，称其为满二叉树；满二叉树从最底层最右侧开始删除k个元素后就可以得到完全二叉树。</p><p><strong>二叉树的三种遍历方式</strong></p><p><strong>二叉树的增删</strong></p><h2 id="三、竞赛树"><a href="#三、竞赛树" class="headerlink" title="三、竞赛树"></a>三、竞赛树</h2><p>竞赛树也称为选择树(selection tree)，也是完全二叉树。分为赢者树(winner tree)和输者树(loser tree)。</p><p><strong>箱子装配问题</strong></p><h2 id="四、搜索树"><a href="#四、搜索树" class="headerlink" title="四、搜索树"></a>四、搜索树</h2><p><strong>二叉搜索树</strong>：满足一下条件的二叉树称为二叉搜索树：1、每个元素有一个关键字且唯一。2、根结点的左子树中，元素的关键字都小于根结点的关键字。3、根结点的右子树中，元素的关键字都大于根结点的关键字。4、根结点的左右子树也都是二叉搜索树。</p><p><strong>索引二叉搜索树</strong>：源于普通二叉搜索树，只是在每个节点中添加一个leftSize域。这个域的值是该节点左子树的元素个数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据结构-树&quot;&gt;&lt;a href=&quot;#数据结构-树&quot; class=&quot;headerlink&quot; title=&quot;数据结构-树&quot;&gt;&lt;/a&gt;&lt;strong&gt;数据结构-树&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;一、树&quot;&gt;&lt;a href=&quot;#一、树&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="数据结构" scheme="http://frank-2169.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://frank-2169.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="树" scheme="http://frank-2169.github.io/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>武汉一日游</title>
    <link href="http://frank-2169.github.io/2023/05/24/wu-han-yi-ri-you-20230524/"/>
    <id>http://frank-2169.github.io/2023/05/24/wu-han-yi-ri-you-20230524/</id>
    <published>2023-05-23T16:00:00.000Z</published>
    <updated>2023-06-21T13:33:55.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="武汉一日游"><a href="#武汉一日游" class="headerlink" title="武汉一日游"></a><strong>武汉一日游</strong></h1><p>本来博主想直接去武当山的，但是错过了直达高铁，于是选择先到武汉中转，顺便玩一天。早上去了黄鹤楼以及旁边的粮道街找小吃。</p><h2 id="一、黄鹤楼公园"><a href="#一、黄鹤楼公园" class="headerlink" title="一、黄鹤楼公园"></a>一、黄鹤楼公园</h2><p>黄鹤楼是一座历史悠久，富有人文气息的建筑。想必大家都知道那句诗“昔人已乘黄鹤去，此地空余黄鹤楼。”，描述的正是此楼。</p><p><img src="/2023/05/24/wu-han-yi-ri-you-20230524/%E9%BB%84%E9%B9%A4%E6%A5%BC%E6%AD%A3%E9%9D%A2.jpg" alt="黄鹤楼正面"></p><p><img src="/2023/05/24/wu-han-yi-ri-you-20230524/%E9%BB%84%E9%B9%A4%E6%A5%BC%E8%83%8C%E9%9D%A2.jpg" alt="黄鹤楼背面"></p><p>黄鹤楼是去武汉最值得打卡的地方之一。楼内有大量的壁画、诗词、书法，特别适合带小孩过来参观学习。而且站在楼最高层，可以远眺长江大桥，景色也是很棒的。公园还有一个叫鹅池的景点，参观时有位热心爷爷突然和我介绍起了一块“鹅”字石碑，据说是王羲之的真迹，首创的写法，将“我”写在“鸟”上面。说到激动时咳嗽也不忘介绍，可以很真切的感受到武汉当地人的文化自豪。听完介绍，瞬间对王羲之更钦佩了，仔细看新造的“鹅”字真的很传神，很想一只昂首朝前的鹅，上下的写法也更像现实中脖子长长的鹅。</p><p><img src="/2023/05/24/wu-han-yi-ri-you-20230524/%E7%8E%8B%E7%BE%B2%E4%B9%8B%E8%87%AA%E5%88%9B%E9%B9%85%E5%AD%97.jpg" alt="王羲之自创鹅字"></p><h2 id="二、粮道街美食"><a href="#二、粮道街美食" class="headerlink" title="二、粮道街美食"></a>二、粮道街美食</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;武汉一日游&quot;&gt;&lt;a href=&quot;#武汉一日游&quot; class=&quot;headerlink&quot; title=&quot;武汉一日游&quot;&gt;&lt;/a&gt;&lt;strong&gt;武汉一日游&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;本来博主想直接去武当山的，但是错过了直达高铁，于是选择先到武汉中转，顺便玩一天。早</summary>
      
    
    
    
    <category term="旅游日记" scheme="http://frank-2169.github.io/categories/%E6%97%85%E6%B8%B8%E6%97%A5%E8%AE%B0/"/>
    
    
    <category term="旅游" scheme="http://frank-2169.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="武汉" scheme="http://frank-2169.github.io/tags/%E6%AD%A6%E6%B1%89/"/>
    
  </entry>
  
</feed>
